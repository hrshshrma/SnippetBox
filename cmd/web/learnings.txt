package main

import (
	"fmt"
	"log"
	"net/http" // provides http client and server implementations
	"strconv"
)

// the home handler function which writes a byte slice
// handler = when a request comes through a route it performs the tasks
func home(w http.ResponseWriter, r *http.Request) {

	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	w.Write([]byte("Hello from Snippetbox"))
}

func snippetView(w http.ResponseWriter, r *http.Request) {

	id, err := strconv.Atoi(r.URL.Query().Get("id"))
	if err != nil || id < 1 {
		http.NotFound(w, r)
		return
	}

	fmt.Fprintf(w, "Display a specific snippet with ID %d...", id)
}

func snippetCreate(w http.ResponseWriter, r *http.Request) {
	// Use r.Method to check whether the request is using POST or not.
	//if r.Method != "POST" - using these constants - prevent runtime error
	//due to typos and makes code cleaner
	if r.Method != http.MethodPost {
		w.Header().Set("Allow", http.MethodPost)

		//w.WriteHeader(405)
		//w.Write([]byte("Method Not Allowed"))

		//calls the w.WriteHeader() and w.Write() methods behind-the-scenes
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
		return
	}
	w.Write([]byte("Create a new snippet...."))
}

func main() {
	// Use the http.NewServeMux() function to initialize a new servemux, then
	// register the home function as the handler for the "/" URL pattern.

	//ServeMux is an HTTP request multiplexer.
	//It matches the URL of each incoming request
	//against a list of registered patterns and
	//calls the handler for the pattern that most closely matches the URL.
	mux := http.NewServeMux() //good practice to have local survemux
	mux.HandleFunc("/", home)
	mux.HandleFunc("/snippet/view", snippetView)
	mux.HandleFunc("/snippet/create", snippetCreate)

	// we use the log.Fatal() function to log the error message and exit. Note
	// that any error returned by http.ListenAndServe() is always non-nil.
	log.Println("Starting server on :4000")

	// ListenAndServe starts an HTTP server with a given address and handler
	err := http.ListenAndServe(":4000", mux)
	log.Fatal(err)
}

